Munida.discrete.temp[(nrow(Munida.discrete.temp)),"SampleType"]  <- "C"
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"SampleDepth"] <- 5
UTC.datetime <- as.POSIXct(Cruise.data$summary$ShipStops[sel.cruise,2],tz="UTC")
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Date"]     <- as.character(as.Date(UTC.datetime))
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"DateTime"] <- strftime(UTC.datetime)
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Lon"]         <- Cruise.data$summary$ShipStops[sel.cruise,"lon.E"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Lat"]         <- Cruise.data$summary$ShipStops[sel.cruise,"lat.N"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Distance_TH"] <- Cruise.data$summary$ShipStops[sel.cruise,"D.TH"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"TC"]          <- Cruise.data$summary$ShipStops[sel.cruise,"SST"]
sel <- (Munida.discrete.temp$Cruise == Cruise) & (Munida.discrete.temp$Station == stations[i]) & (Munida.discrete.temp$SampleType == "C")
}
for (j in c("SAL","DRP","NO3","DRSi","TA","DIC","Chla")){
if ( !is.na(Munida.discrete.temp[sel,j]) ){
print(paste(j,"was already filled in at",Cruise,stations[i],"C"))
} else { if ((is.null(Cruise.data$summary$ShipStops[sel.cruise,j]))){
print(paste(j,"was not available for",Cruise,stations[i],"C"))
} else{
Munida.discrete.temp[sel,j] <- Cruise.data$summary$ShipStops[sel.cruise,j]
}
}
}
}
tail(Munida.discrete.temp)
sel     <- (Munida.discrete.temp$Cruise == Cruise) & (Munida.discrete.temp$SampleType == "C")
par(mfrow=c(1,2))
plot(x=Munida.discrete.temp[sel,"TA"],y=Cruise.data$summary$ShipStops[,"TA"],pch=16,col="black",
xlab="TA database",ylab="TA CruiseData")
Cruise <- "P250324"
load(paste(Cruise,"/",Cruise,"_AllData.Rdata",sep=""))
Munida.discrete.temp <- Munida.discrete.database
#sel <- which(Munida.discrete.temp$Cruise == Cruise)
#Munida.discrete.temp <- Munida.discrete.temp[-sel,]
#-------------------
# Underway samples
#-------------------
# Find available stations
stations <- as.numeric(strsplit(Cruise.data$summary$ShipStops[,1]," ")[[1]][2])
for (i in 2:nrow(Cruise.data$summary$ShipStops)){
if (!is.na(as.numeric(strsplit(Cruise.data$summary$ShipStops[,1]," ")[[i]][2]))) stations <- c(stations,as.numeric(strsplit(Cruise.data$summary$ShipStops[,1]," ")[[i]][2]))
}
stations <- stations[!is.na(stations)]
for (i in 1:length(stations)){
sel.cruise <- (Cruise.data$summary$ShipStops[,"StationName"] == paste("Kim",i))
sel <- (Munida.discrete.temp$Cruise == Cruise) & (Munida.discrete.temp$Station == stations[i]) & (Munida.discrete.temp$SampleType == "C")
if (nrow(Munida.discrete.temp[sel,])==0) {
Munida.discrete.temp[(nrow(Munida.discrete.temp)+1),"Cruise"]    <- Cruise
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Station"]     <- stations[i]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"SampleType"]  <- "C"
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"SampleDepth"] <- 5
UTC.datetime <- as.POSIXct(Cruise.data$summary$ShipStops[sel.cruise,2],tz="UTC")
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Date"]     <- as.character(as.Date(UTC.datetime))
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"DateTime"] <- strftime(UTC.datetime)
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Lon"]         <- Cruise.data$summary$ShipStops[sel.cruise,"lon.E"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Lat"]         <- Cruise.data$summary$ShipStops[sel.cruise,"lat.N"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"Distance_TH"] <- Cruise.data$summary$ShipStops[sel.cruise,"D.TH"]
Munida.discrete.temp[(nrow(Munida.discrete.temp)),"TC"]          <- Cruise.data$summary$ShipStops[sel.cruise,"SST"]
sel <- (Munida.discrete.temp$Cruise == Cruise) & (Munida.discrete.temp$Station == stations[i]) & (Munida.discrete.temp$SampleType == "C")
}
for (j in c("SAL","DRP","NO3","DRSi","TA","DIC","Chla")){
if ( !is.na(Munida.discrete.temp[sel,j]) ){
print(paste(j,"was already filled in at",Cruise,stations[i],"C"))
} else { if ((is.null(Cruise.data$summary$ShipStops[sel.cruise,j]))){
print(paste(j,"was not available for",Cruise,stations[i],"C"))
} else{
Munida.discrete.temp[sel,j] <- Cruise.data$summary$ShipStops[sel.cruise,j]
}
}
}
}
tail(Munida.discrete.temp)
sel     <- (Munida.discrete.temp$Cruise == Cruise) & (Munida.discrete.temp$SampleType == "C")
par(mfrow=c(1,2))
plot(x=Munida.discrete.temp[sel,"TA"],y=Cruise.data$summary$ShipStops[,"TA"],pch=16,col="black",
xlab="TA database",ylab="TA CruiseData")
?write.xlsx
write.xlsx(Munida.discrete.database,file="../Munida_database/MunidaDatabaseDiscrete_Seb")
setwd("~/2434 - Otago-NIWA/Teaching/2025 - MARI322/Week39_Cbudget/MARI322_package")
require(seacarb)
require(openxlsx)
# Set working directory to location of this script file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#==============================================================================
# Load database
#==============================================================================
load("Munida_database/MunidaDatabaseDiscrete_Seb.Rdata")
sel <- (Munida.discrete.database$SampleType == "C") & (as.Date(Munida.discrete.database[,"Date"] ) > as.POSIXct("2019-12-31"))
extract <- Munida.discrete.database[sel,]
extract <- extract[!is.na(extract$Cruise),]
output  <- extract[,c("Cruise","Station","Date","DateTime","Lon","Lat","Distance_TH","TC","SAL","DRP","NO3","DRSi")]
output
require(seacarb)
require(openxlsx)
# Set working directory to location of this script file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#==============================================================================
# Load database
#==============================================================================
load("Munida_database/MunidaDatabaseDiscrete_Seb.Rdata")
sel <- (Munida.discrete.database$SampleType == "C") & (as.Date(Munida.discrete.database[,"Date"] ) > as.POSIXct("2019-12-31"))
as.Date(Munida.discrete.database[,"Date"]
)
?as.Date
as.Date(Munida.discrete.database[,"Date"], format = "%Y-%m-%d" )
as.POSIXct("2019-12-31")
as.Date(Munida.discrete.database[,"Date"], format = "%Y-%m-%d", tz ="NZDT" ) > as.POSIXct("2019-12-31")
sel <- (Munida.discrete.database$SampleType == "C") & (as.Date(Munida.discrete.database[,"Date"], format = "%Y-%m-%d") > as.Date("2019-12-31", format = "%Y-%m-%d"))
extract <- Munida.discrete.database[sel,]
extract <- extract[!is.na(extract$Cruise),]
output  <- extract[,c("Cruise","Station","Date","DateTime","Lon","Lat","Distance_TH","TC","SAL","DRP","NO3","DRSi")]
head(output)
tail(output)
write.csv(output,file="Munida_ForSajini.csv")
library(learnr)
library(knitr)
library(tutorial.helpers)
library(ReacTran)
library(seacarb)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(out.width = '90%')
pars <- list(
TA.Owheo  = 0.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 0.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 0.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 0.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 0.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 0.0, # [m3/s] flow of the Owheo
V_box = 0.0, # [m3] volume of our box
A_box = 0.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q.Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q.Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo  )/(V.harbour*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo )/(V.harbour*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
pars <- c(
Q_ocean_in = 0.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 0.0, # [m3/s] flow of the Owheo
V_box = 0.0, # [m3] volume of our box
A_box = 0.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
### Fluxes
# estuarine exchange
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
### assemble SV vector
SV.return <- c(0)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(0), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("Q_ocean_in = ",solution$Q_ocean_in," m3/s"))
print(paste("Q_ocean_out = ",solution$Q_ocean_out," m3/s"))
pars <- list(
TA.Owheo  = 0.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 0.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 0.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 0.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 0.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 0.0, # [m3/s] flow of the Owheo
V_box = 0.0, # [m3] volume of our box
A_box = 0.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo  )/(V.harbour*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo )/(V.harbour*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
pars <- list(
TA.Owheo  = 0.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 0.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 0.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 0.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 0.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 0.0, # [m3/s] flow of the Owheo
V_box = 0.0, # [m3] volume of our box
A_box = 0.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo  )/(V_box*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo )/(V_box*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
pars <- list(
TA.Owheo  = 10.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 10.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 10.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 10.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 10.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 10.0, # [m3/s] flow of the Owheo
V_box = 10.0, # [m3] volume of our box
A_box = 10.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo  )/(V_box*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo )/(V_box*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("TA concentration in the Harbour = ", solution$y[[1]]," umol/kg"))
print(paste("DIC concentration in the Harbour = ",solution$y[[2]]," umol/kg"))
?carb
?carb
pars <- list(
pCO2_atm = 10.0, # [ppm] the atmospheric CO2 concentration
U2       = 10.0, # [m2/s2] the windspeed over the Otago harbour
TC       = 10.0, # [degC] the temperature of Otago harbour water
S        = 10.0, # [-] the salinity of Otago harbour water
TA.Owheo  = 10.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 10.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 10.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 10.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 10.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 10.0, # [m3/s] flow of the Owheo
V_box = 10.0, # [m3] volume of our box
A_box = 10.0  # [m2] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
# sea-air exchange [umol yr-1]
pCO2.harbour <- carb(flag=15,var1=TA.harbour*1e-6,    var2=DIC.harbour*1e-6,T=TC, S=S)$pCO2
F_seaair_CO2 <- 7.7e-4*U2*(pCO2.harbour-pCO2_atm)*A_box*1e6
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo                )/(V_box*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo - F_seaair_CO2)/(V_box*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out,
# sea-air CO2 flux
F_seaair_CO2 = F_seaair_CO2/A_box*1e-6)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("TA concentration in the Harbour = ", solution$y[[1]]," umol/kg"))
print(paste("DIC concentration in the Harbour = ",solution$y[[2]]," umol/kg"))
print(paste("DIC concentration in the Harbour = ",solution$F_seaair_CO2," mol/m2/yr"))
pars <- c(
V_box = 1.0, # [m3] volume of our box
A_box = 1.0  # [m3] surface area of our box
)
print(pars)
pars <- c(
Q_ocean_in = 1.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 1.0, # [m3/s] flow of the Owheo
V_box = 1.0, # [m3] volume of our box
A_box = 1.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
### Fluxes
# estuarine exchange
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
### assemble SV vector
SV.return <- c(0)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(0), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("Q_ocean_in = ",solution$Q_ocean_in," m3/s"))
print(paste("Q_ocean_out = ",solution$Q_ocean_out," m3/s"))
pars <- list(
TA.Owheo  = 1.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 1.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 1.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 1.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 1.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 1.0, # [m3/s] flow of the Owheo
V_box = 1.0, # [m3] volume of our box
A_box = 1.0  # [m3] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo  )/(V_box*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo )/(V_box*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("TA concentration in the Harbour = ", solution$y[[1]]," umol/kg"))
print(paste("DIC concentration in the Harbour = ",solution$y[[2]]," umol/kg"))
question("What is the extra complicating factor for the dissolution of CO2 in seawater?",
answer("CO2 in seawater behaves as an acid", correct = TRUE),
answer("There is very little CO2 in the atmosphere (compared to oxygen)"),
answer("There is a lot of CO2 in the atmosphere (compared to methane)"),
answer("I really should have attended more of the workshops"),
random_answer_order = TRUE,
allow_retry = TRUE
)
pars <- list(
pCO2_atm = 1.0, # [ppm] the atmospheric CO2 concentration
U2       = 1.0, # [m2/s2] the windspeed over the Otago harbour
TC       = 1.0, # [degC] the temperature of Otago harbour water
S        = 1.0, # [-] the salinity of Otago harbour water
TA.Owheo  = 1.0,  # [umol/kg] Concentration of TA in the Owheo River
DIC.Owheo = 1.0,  # [umol/kg] Concentration of DIC in the Owheo River
TA.ocean  = 1.0,  # [umol/kg] Concentration of TA in the open ocean
DIC.ocean = 1.0,  # [umol/kg] Concentration of DIC in the open ocean
Q_ocean_in = 1.0, # [m3/s] flow of the ocean into the harbour
Q_Owheo    = 1.0, # [m3/s] flow of the Owheo
V_box = 1.0, # [m3] volume of our box
A_box = 1.0  # [m2] surface area of our box
)
OH.box <- function(t, state, parameters)
{
with(as.list(c(state, parameters)),{
TA.harbour  <- state[1]  # TA in harbour
DIC.harbour <- state[2]  # DIC in harbour
### Fluxes
# estuarine exchange [umol yr-1]
Q_ocean_in  <- Q_ocean_in
Q_ocean_out <- Q_ocean_in + Q_Owheo
F_TA_ocean_in   <- (Q_ocean_in*1e3*3600*24*365.25)  * (TA.ocean*1.023)
F_TA_ocean_out  <- (Q_ocean_out*1e3*3600*24*365.25) * (TA.harbour*1.023)
F_DIC_ocean_in  <- (Q_ocean_in*1e3*3600*24*365.25)  * (DIC.ocean*1.023)
F_DIC_ocean_out <- (Q_ocean_out*1e3*3600*24*365.25) * (DIC.harbour*1.023)
# riverine input [umol yr-1]
F_TA_owheo  <- (Q_Owheo*1e3*3600*24*365.25) * (TA.Owheo)
F_DIC_owheo <- (Q_Owheo*1e3*3600*24*365.25) * (DIC.Owheo)
# sea-air exchange [umol yr-1]
pCO2.harbour <- carb(flag=15,var1=TA.harbour*1e-6,    var2=DIC.harbour*1e-6,T=TC, S=S)$pCO2
F_seaair_CO2 <- 7.7e-4*U2*(pCO2.harbour-pCO2_atm)*A_box*1e6
### Mass balances
ddt.TA.harbour  <- (F_TA_ocean_in  - F_TA_ocean_out  + F_TA_owheo                )/(V_box*1e3/1.023)
ddt.DIC.harbour <- (F_DIC_ocean_in - F_DIC_ocean_out + F_DIC_owheo - F_seaair_CO2)/(V_box*1e3/1.023)
### assemble SV vector
SV.return <- c(ddt.TA.harbour,ddt.DIC.harbour)
# return list
return(list(
# Total rates of change
SV.return,
# water volume fluxes
Q_ocean_in = Q_ocean_in, Q_ocean_out = Q_ocean_out,
# sea-air CO2 flux
F_seaair_CO2 = F_seaair_CO2/A_box*1e-6)
)
})
}  # end of model equations
solution <- steady(y = c(pars$TA.ocean,pars$DIC.ocean), func = OH.box, method = "stode", positive=T, parms = pars)
print(paste("TA concentration in the Harbour = ", solution$y[[1]]," umol/kg"))
print(paste("DIC concentration in the Harbour = ",solution$y[[2]]," umol/kg"))
print(paste("Sea-air CO2 flux = ",solution$F_seaair_CO2," mol/m2/yr"))
1/365
1/365.25
1e10/(60*1e6)
1e4*1e3*1e3/100*12/(60e6)
90/7
6*728
90*32
setwd("~/2434 - Otago-NIWA/Teaching/2025 - MARI322/Week39_Cbudget/MARI322_package")
load("CoastalStationDataList.Rdata")
